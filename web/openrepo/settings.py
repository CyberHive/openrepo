# Copyright 2022 by Open Kilt LLC. All rights reserved.
# This file is part of the OpenRepo Repository Management Software (OpenRepo)
# OpenRepo is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License
# version 3 as published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""
Django settings for openrepo project.

Generated by 'django-admin startproject' using Django 3.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Allow local overrides of settings for debug/dev
try:
    from .settings_local import *
except:
    pass


OPENREPO_VAR_DIR = os.getenv('OPENREPO_VAR_DIR', '/var/lib/openrepo/')
DOMAIN_NAME = os.getenv("OPENREPO_DOMAIN", "localhost:8080")

_ignore_build_num_str = os.getenv("RPM_VERSION_IGNORE_BUILD_NUM", "false").lower()
RPM_VERSION_IGNORE_BUILD_NUM = _ignore_build_num_str != "false" and _ignore_build_num_str != "0" and _ignore_build_num_str != "no"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-s8-h-mhty&_oa)qouzm!_$8s3$yn_u4x$7q$gh7o66cd=3&o_h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("OPENREPO_DEBUG", "FALSE").upper() == "TRUE"

if os.getenv("OPENREPO_SECURE_HOSTS", "FALSE").upper() == "TRUE":
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', DOMAIN_NAME]
else:
    # For additional security, consider enabling this security feature
    # https://security.stackexchange.com/questions/45687/what-does-djangos-allowed-hosts-variable-actually-do
    ALLOWED_HOSTS = ['*']

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'widget_tweaks',
    'repo',
    'rest_framework',
    'rest_framework.authtoken'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'openrepo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'repo', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'openrepo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

db_type = os.getenv('OPENREPO_DB_TYPE', 'sqlite')
if db_type == 'sqlite':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(OPENREPO_VAR_DIR, 'db.sqlite3'),
        }
    }
elif db_type == 'postgresql':

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv("OPENREPO_PG_DATABASE", "openrepo"),
            'USER': os.getenv("OPENREPO_PG_USERNAME", "postgres"),
            'PASSWORD': os.getenv("OPENREPO_PG_PASSWORD", "postgres"),
            'HOST': os.getenv("OPENREPO_PG_HOSTNAME", "localhost"),
            'PORT': os.getenv("OPENREPO_PG_PORT", "5432"),
        }
    }
else:
    raise Exception(f"Cannot determine database to use for OPENREPO_DB_TYPE={db_type}")

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
if DEBUG:
    STATICFILES_DIRS = [
        BASE_DIR / "static",
    ]
else:
    STATIC_ROOT = os.path.join(BASE_DIR, "static/")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/admin/login/'

REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'repo.api.authentication.CsrfExemptSessionAuthentication'
    ],
    'URL_FIELD_NAME': 'href',

    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        #'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
        #'rest_framework.permissions.IsAuthenticated'
        'repo.api.authentication.CustomOpenRepoPermission'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 2000
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s:%(lineno)d: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'openrepo_web': {
            'handlers': ['console'],
            'level': os.getenv('OPENREPO_LOGLEVEL', 'INFO'),
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    }
}


STORAGE_PATH = os.path.join(OPENREPO_VAR_DIR, 'packages/')
DEB_DB_PATH = os.path.join(OPENREPO_VAR_DIR, 'debcache.db')
RPM_CACHE_DIR = os.path.join(OPENREPO_VAR_DIR, 'rpmcache/')
KEYRING_PATH = os.path.join(OPENREPO_VAR_DIR, 'keyring/')
REPO_WWW_PATH = os.path.join(OPENREPO_VAR_DIR, 'www/')

# The character length of the folder prefix for storing files (e.g., a prefix of two would yield aa, ab, ac, etc)
STORAGE_PREFIX_DEPTH = 2
# The character length of the package files stored on disk
STORAGE_FILENAME_LENGTH = 32

# In case a repo creation gets frozen in bg worker, this will allow it to reattempt
REPO_CREATE_TIMEOUT_SEC = 60*60*2

